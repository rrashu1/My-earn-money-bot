<?php

// --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ---
define('BOT_TOKEN', 'YOUR_BOT_TOKEN'); // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
define('WEB_APP_URL', 'eid-special-lottery.vercel.app'); // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶∞ URL ‡¶¶‡¶ø‡¶®
define('LOG_UPDATES', false); // true ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶Ü‡¶™‡¶°‡ßá‡¶ü error_log ‡¶è ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá (‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)

$required_channels = [
    [
        'id' => '@global_Fun22', // ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ
        'name' => 'Global Fun',
        'url' => 'https://t.me/global_Fun22'
    ],
    [
        'id' => '@instant_earn_airdrop',
        'name' => 'Instant Earn Airdrop',
        'url' => 'https://t.me/instant_earn_airdrop'
    ],
    [
        'id' => '@myearn_Cash_payment',
        'name' => 'MyEarn Cash Payment',
        'url' => 'https://t.me/myearn_Cash_payment'
    ]
];
// --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ---


// --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
functionapiRequest($method, $parameters = []) {
    if (!is_string($method)) {
        error_log("Method name must be a string\n");
        return false;
    }

    if (!$parameters) {
        $parameters = [];
    } elseif (!is_array($parameters)) {
        error_log("Parameters must be an array\n");
        return false;
    }

    $url = 'https://api.telegram.org/bot' . BOT_TOKEN . '/' . $method;

    $handle = curl_init($url);
    curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($handle, CURLOPT_CONNECTTIMEOUT, 5);
    curl_setopt($handle, CURLOPT_TIMEOUT, 60);
    curl_setopt($handle, CURLOPT_POSTFIELDS, http_build_query($parameters));
    // Render ‡¶è‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡ßü‡¶æ‡¶∞‡ßá IPv6 ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶§‡¶æ‡¶á IPv4 ‡¶§‡ßá ‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    if (defined('CURLOPT_IPRESOLVE') && defined('CURL_IPRESOLVE_V4')) {
        curl_setopt($handle, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
    }

    $response = curl_exec($handle);

    if ($response === false) {
        $errno = curl_errno($handle);
        $error = curl_error($handle);
        error_log("Curl error ($errno): $error\n");
        curl_close($handle);
        return false;
    }

    $http_code = intval(curl_getinfo($handle, CURLINFO_HTTP_CODE));
    curl_close($handle);

    if ($http_code >= 500) {
        // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø false ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
        error_log("Telegram API error, HTTP code $http_code\n");
        return false;
    } elseif ($http_code != 200) {
        $response_decoded = json_decode($response, true);
        error_log("Request failed with code $http_code: " . $response_decoded['description'] . "\n");
        return false;
    }

    return json_decode($response, true);
}

function sendMessage($chat_id, $text, $reply_markup = null) {
    $params = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => 'HTML' // Markdown ‡¶¨‡¶æ HTML ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
    ];
    if ($reply_markup) {
        $params['reply_markup'] = json_encode($reply_markup);
    }
    return apiRequest('sendMessage', $params);
}

function answerCallbackQuery($callback_query_id, $text = null, $show_alert = false) {
    $params = [
        'callback_query_id' => $callback_query_id,
    ];
    if ($text) {
        $params['text'] = $text;
    }
    if ($show_alert) {
        $params['show_alert'] = true;
    }
    return apiRequest('answerCallbackQuery', $params);
}

function isUserMemberOfChannel($user_id, $channel_id) {
    $response = apiRequest('getChatMember', [
        'chat_id' => $channel_id,
        'user_id' => $user_id
    ]);

    if ($response && $response['ok']) {
        $status = $response['result']['status'];
        // 'creator', 'administrator', 'member' ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ú‡ßü‡ßá‡¶®‡¶° ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ó‡¶£‡ßç‡¶Ø ‡¶π‡¶¨‡ßá
        return in_array($status, ['creator', 'administrator', 'member']);
    }
    // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡¶£‡ßá API ‡¶ï‡¶≤ ‡¶´‡ßá‡¶á‡¶≤ ‡¶π‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶®‡¶æ ‡¶π‡ßü
    error_log("getChatMember failed for user $user_id in channel $channel_id: " . print_r($response, true));
    return false;
}

// --- ‡¶¨‡¶ü ‡¶≤‡¶ú‡¶ø‡¶ï ---
function processUpdate($update) {
    global $required_channels;

    $message = $update['message'] ?? null;
    $callback_query = $update['callback_query'] ?? null;

    if ($message) {
        $chat_id = $message['chat']['id'];
        $user_id = $message['from']['id'];
        $text = $message['text'] ?? '';

        if ($text === '/start') {
            handleStartCommand($chat_id, $user_id);
        }
    } elseif ($callback_query) {
        $chat_id = $callback_query['message']['chat']['id'];
        $user_id = $callback_query['from']['id'];
        $data = $callback_query['data'];
        $callback_query_id = $callback_query['id'];

        if ($data === 'check_join_status') {
            answerCallbackQuery($callback_query_id); // ‡¶¨‡¶æ‡¶ü‡¶® ‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶è‡¶∞ ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
            handleStartCommand($chat_id, $user_id); // ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï
        }
    }
}

function handleStartCommand($chat_id, $user_id) {
    global $required_channels;
    $all_joined = true;
    $not_joined_channels_info = [];

    foreach ($required_channels as $channel) {
        if (!isUserMemberOfChannel($user_id, $channel['id'])) {
            $all_joined = false;
            $not_joined_channels_info[] = $channel;
        }
    }

    if ($all_joined) {
        $welcome_message = "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡¶ï‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:";
        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üåê ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®', 'web_app' => ['url' => WEB_APP_URL]]
                ]
            ]
        ];
        sendMessage($chat_id, $welcome_message, $keyboard);
    } else {
        $join_message = "‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n";
        $inline_keyboard_buttons = [];

        foreach ($not_joined_channels_info as $channel) {
            $join_message .= "‚û°Ô∏è <b>" . htmlspecialchars($channel['name']) . "</b>\n";
            $inline_keyboard_buttons[] = [['text' => 'üîó ' . htmlspecialchars($channel['name']), 'url' => $channel['url']]];
        }
        $join_message .= "\n‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§";

        $inline_keyboard_buttons[] = [['text' => '‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø / ‡¶∞‡¶ø‡¶ö‡ßá‡¶ï', 'callback_data' => 'check_join_status']];
        $keyboard = ['inline_keyboard' => $inline_keyboard_buttons];
        sendMessage($chat_id, $join_message, $keyboard);
    }
}


// --- Webhook ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ---
if (php_sapi_name() == 'cli') {
    // ‡¶Ø‡¶¶‡¶ø CLI ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶§‡¶¨‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶®‡ßá‡¶á
    exit("This script is designed to be run as a web service.\n");
}

// Webhook ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá)
// ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Render ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ URL ‡¶π‡¶¨‡ßá: https://your-app-name.onrender.com
// ‡¶§‡¶ñ‡¶® ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶è‡¶á URL ‡¶ü‡¶ø ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®: https://your-app-name.onrender.com/index.php?setup=1
if (isset($_GET['setup'])) {
    if ($_GET['setup'] == '1' && BOT_TOKEN != 'YOUR_BOT_TOKEN') {
        $render_app_url = $_SERVER['HTTP_X_FORWARDED_PROTO'] . "://" . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'];
        // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá Render URL HTTPS ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá
        if (strpos($render_app_url, '.onrender.com') !== false && strpos($render_app_url, 'https://') !== 0) {
             $render_app_url = 'https://' . substr($render_app_url, strpos($render_app_url, '://') + 3);
        }

        $response = apiRequest('setWebhook', ['url' => $render_app_url]);
        if ($response && $response['ok']) {
            echo "Webhook successfully set to: " . htmlspecialchars($render_app_url) . "<br>";
            echo "Response: " . htmlspecialchars(json_encode($response));
        } else {
            echo "Failed to set webhook.<br>";
            echo "URL tried: " . htmlspecialchars($render_app_url) . "<br>";
            echo "Response: " . htmlspecialchars(json_encode($response));
            if (BOT_TOKEN === 'YOUR_BOT_TOKEN') {
                echo "<br><b>Error: Please set your BOT_TOKEN in the script.</b>";
            }
        }
    } elseif (isset($_GET['setup']) && $_GET['setup'] == '0' && BOT_TOKEN != 'YOUR_BOT_TOKEN') {
        $response = apiRequest('deleteWebhook');
         if ($response && $response['ok']) {
            echo "Webhook successfully deleted.<br>";
            echo "Response: " . htmlspecialchars(json_encode($response));
        } else {
            echo "Failed to delete webhook.<br>";
            echo "Response: " . htmlspecialchars(json_encode($response));
        }
    } else {
        echo "To set up webhook, use ?setup=1. To delete, use ?setup=0. <br> Ensure BOT_TOKEN is set in the script.";
    }
    exit;
}


$update_json = file_get_contents('php://input');
if (empty($update_json)) {
    // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßá)
    http_response_code(200); // Telegram ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶Ø‡ßá ‡¶¨‡¶ü ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá
    echo "Telegram Bot is listening... (Webhook should be POSTing here)";
    exit;
}

$update = json_decode($update_json, true);

if (!$update) {
    error_log("Failed to decode JSON input: " . $update_json);
    http_response_code(400); // Bad request
    exit;
}

if (LOG_UPDATES) {
    error_log("Received update: " . $update_json);
}

// Telegram ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡ßü ‡¶¶‡ßá‡ßü ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
// ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶Æ‡ßü ‡¶®‡ßá‡ßü, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø 200 OK ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
// ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® (Render-‡¶è ‡¶è‡¶ü‡¶ø ‡¶ï‡¶†‡¶ø‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá)‡•§
// ‡¶è‡¶á ‡¶¨‡¶ü‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶è‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§
http_response_code(200); // ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ï‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá

processUpdate($update);

?>